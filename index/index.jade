
extends ../layout

block header
  .container
    h1 normalize.io
      small  &alpha;lpha
    p
      small <code>@import</code> the future, <code>nlz-build(1)</code> the present, <code>normalize</code> the past.

block main
  section: .container
    h2(id='normalizing-web-development') Normalizing Web Development
    :markdown
      Web development is a mess. There are a vast number
      of package managers and build systems, each with their own set of
      plugins, transforms, and configurations,
      and an endless number of combinations thereof.
      But all these package managers and build systems are,
      for the most part, unnecessary with the dawn of
      ES6 modules, Web Components, and SPDY.

      Normalize.IO aims to rid web development of this confusing by
      promoting a workflow without configurations, plugins, or package managers.

      #### No package managers

      There are no `install` steps. Dependencies are automatically fetched
      from GitHub, npm, or whichever remote you wish to support.
      Just write `import jquery from 'jquery@~2.1.0'` and you're good to go!

      #### No manifest files

      There's no mandatory `package.json` or `bower.json` file to publish your component.

      #### No build step

      Normalize.IO aims to remove explicit build steps in a workflow.
      There's no need for concatenating and inlining assets
      with SPDY push and new loading mechanisms such as ES6 modules and HTML imports.
      Until these transports are natively supported on all browsers,
      some sort of build process is required to work.

      #### No plugins or configurations

      There are no configuration files like `gruntfile.js` to build your component or app.
      If Normalize.IO has an adapter for a specific library,
      just install that library and Normalize.IO will handle the rest.
      Just `npm i -g jade` and you can `import template from 'template.jade'` with ease!

      #### Minimal client-side complexity

      No loaders like [requirejs](http://requirejs.org) or
      polyfills like [es6-module-loader](https://github.com/ModuleLoader/es6-module-loader)
      are used during runtime, keeping assets slim.

  section: .container
    h2(id='perfect-web-development') The Tools
    :markdown

      Normalize.IO is not a single library but a suite of tools
      based on the Normalize philosophy.
      Use whichever is suitable for your project.

      ### Integrated SPDY Push File Server

      An intelligent file server for your apps that crawls your CSS and JavaScript
      files' dependencies, installs them seamlessly, and SPDY pushes them to the client.

      - [koa-normalize](https://github.com/normalize/koa.js) for [koa](https://koajs.com)

      ### Normalizing Proxy

      An ephemeral proxy that caches packages from various remotes such as GitHub and npm,
      normalizes various aspects of packages, handles semantic versioning,
      and serves its individual files as browser-compatible assets.
      It's used as a registry for all clients.

      You may use the public proxy at https://nlz.io,
      but you should [setup your own proxy](https://github.com/normalize/proxy.js)
      to your custom remotes.

      ### `nlz(1)`

      A ES6 and CommonJS builder to let us build apps until all browsers
      support ES6 modules and Web Components.
      It installs, caches, and builds files just like a browser would,
      making migration to a buildless development workflow seamless.

      Once browsers support ES6 modules and Web Components,
      `nlz(1)` will be completely optional,
      and it's main purpose will be dependency inspection

    a#to-source.m-btn.green(href='https://github.com/normalize/normalize.github.io') Show Me an Example!

  section: .container
    h2(id='defining-dependencies') Defining Dependencies
    :markdown
      Instead of defining a manifest file, like `package.json` or `bower.json`,
      to define your dependencies and their versions, you can just define them
      in your files.
      There are two ways to define them: using URLs and using shorthands.

      For example, here are multiple ways to depend on `jQuery` using
      ES6 module syntax:

      ```js
      // using URLs
      import $ from 'https://github.com/components/jquery/~2.1.0/jquery.js'
      import $ from 'https://nlz.io/github/components/jquery/~2.1.0/jquery.js'
      import $ from 'https://nlz.io/npm/-/jquery/~2.1.0/jquery.js'

      // using shorthands
      import $ from 'jquery@~2.1.0' // from npm
      import $ from 'components/jquery@~2.1.0' // from github
      ```

      ```css
      // using URLs
      @import "https://nlz.io/github/necolas/normalize.css/^3.0.0/normalize.css";
      // please don't use shorthands in CSS :)
      ```

      When using shorthands, some sort of build process or custom loader is required.

  section: .container
    h2(id='transformations') URL-based Transformations
    :markdown
      Normalize uses URLs to specify transformations in an HTTP-compliant manner.
      For example, suppose you have `template.jade` that you want to use in multiple ways.

      ```js
      // use the template as a function
      import render from 'template.jade.js'

      var html = render({
        name: 'jong'
      })
      ```

      ```js
      // use the template as an HTML string
      import html from 'template.jade.html.js'

      document.body.insertAdjacentHTML('beforeend', html)
      ```

      ```js
      // use the template as a DOM element via domify
      // https://github.com/component/domify
      import el from 'template.jade.html.domify.js'

      document.body.appendChild(el.cloneNode(true))
      ```

      No plugins or configuration required!
      And all transformations are explicitly shown and used instead of being hidden behind a complex build system.
      For more details on transformations, read the [docs on transforms](api.html#transforms).

      > Note: if you use transformations on local files,
      > you will always need some sort of build system.
      > Push these transformations to separate modules.

  section: .container
    h2(id='cdn') Use https://nlz.io as a CDN
    :markdown
      https://nlz.io is essentially a CDN, but no CDN supports SPDY Push yet!
      Unlike other CDNs such as http://cdnjs.com, http://wzrd.in, http://jspm.io, http://www.jsdelivr.com, normalization proxies:

      - SPDY push dependencies
      - Support CSS, Web Components, and well as any arbitrary file
      - Allow serving individual files, not just packages and modules
      - Do not [require pull requests](https://github.com/cdnjs/cdnjs/pulls) to add and update libraries
      - Do not require any [client-side runtime JS](https://github.com/ModuleLoader/es6-module-loader)

      If https://nlz.io is ever down or begins tracking your clients,
      just create your own proxy and point your URLs to it!

      > Note: __Do not__ use https://nlz.io in production.

  section: .container
    h2(id='ecosystem') The Normalized Ecosystem
    :markdown
      With Normalize.IO also comes an ecosystem of small, reusable web components.
      Repositories within these GitHub organizations are all maintained by the same team and are completely compatible:

      - [component](https://github.com/component) - tiny web components
      - [detects](https://github.com/detects) - feature detection as tiny ES6 modules
      - [polyfills](https://github.com/polyfills) - polyfills as tiny ES6 modules

      You may also be interested in these other organizations:

      - [components](https://github.com/components) - shim organization for popular packages
      - [suitcss](https://github.com/suitcss) - CSS UI components
