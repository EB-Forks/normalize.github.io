
extends ../layout

block header
  .container
    h1 normalize.io
      small  &alpha;lpha
    p
      small <code>@import</code> the future, <code>nlz build</code> the present, normalize the past.

block main
  section: .container
    h2(id='what-is-this') What is this? Another package manager?
    :markdown
      ### https://nlz.io - an ephemeral normalizing and caching proxy

      A proxy that caches packages from various sources such as GitHub and npm,
      normalizes various aspects to create standards-compliant packages,
      and serves its individual files as browser-compatible assets.

      This is not a CDN (yet) and should not be used in production.
      Instead, you should just setup your own proxy(s).

      ### `nlz(1)` - a stopgap CLI package manager and builder

      Since browsers have not yet implemented ES6 modules and Web Components,
      a server-side build tool is necessary.
      It installs, caches, and builds files just like a browser,
      making migration to a buildless development workflow seamless.
      Once browsers support ES6 modules and Web Components,
      `nlz(1)` will be completely optional.

    a#to-source.m-btn.green(href='https://github.com/normalize/normalize.github.io') Show Me an Example!

  section: .container
    h2(id='specification-compliant') Specifications Compliant and Future Proof
    :markdown
      Normalize advocates a subset WHATWG, W3C, and ECMAScript specifications,
      all of which will eventually be supported natively by browsers.

      ```js
      module $ from "https://nlz.io/npm/-/jquery/~2.1.0/jquery.js";
      ```

      ```css
      @import "https://nlz.io/github/necolas/normalize.css/^3.0.0/normalize.css";
      ```

      ```html
      <link rel="import" href="https://nlz.io/github/components/polymer/0.2.0/">
      ```

  section: .container
    h2(id='spdy-push') SPDY Push Dependencies
    :markdown
      All dependencies, whether JavaScript, CSS, HTML, or images,
      are SPDY pushed to the client from any normalization proxy.
      Installing dependencies with any client, whether `nlz build(1)` or a browser, has never been faster.
      Concatenating all your assets will become completely optional.

  section: .container
    h2(id='semantic-versioning') Semantic Versioning
    :markdown
      Normalize pushes command-line package managers' responsibilities to the normalization proxy.
      You get most of the benefits of a package manager without any JSON files and eventually without any CLI tools.

      ```css
      @import 'https://nlz.io/github/necolas/normalize.css/3/normalize.css';
      @import 'https://nlz.io/github/necolas/normalize.css/3.0.1/normalize.css';
      @import 'https://nlz.io/github/necolas/normalize.css/*/normalize.css';
      @import 'https://nlz.io/github/necolas/normalize.css/^3.0.1/normalize.css';
      @import 'https://nlz.io/github/necolas/normalize.css/~3.0.1/normalize.css';
      ```

  section: .container
    h2(id='normalized-packages') Normalized Packages
    :markdown
      Various types of packages are normalized at the proxy to be standards compliant.
      This allows developers to use packages built using ancient package managers and module systems,
      making migration just a little bit easier.

      For example, node.js modules are shimmed for the browser using the same node.js shims [browserify][browserify] uses.
      This means you can use all [browserify][browserify] modules with Normalize!

      [Browserify][browserify] modules that look like this:

      ```js
      var url = require('url');
      var fs = require('fs');
      ```

      Are rewritten to this with CommonJS used as a stop gap:

      ```js
      var url = require('https://nlz.io/npm/-/url/*/index.js');
      var fs = require('https://nlz.io/github/normalize/empty/1/index.js');
      ```

      Types of packages that are normalized:

      - ☑ `component.json`
      - ☐ `package.json`

        - ☑ `browserify`
        - ☑ `.style` field
        - ☐ `node.js`

      - ☐ `bower.json`

      [browserify]: http://browserify.org

  section: .container
    h2(id='normalized-urls') Normalized URL End Points
    :markdown
      URLs are rewritten to their "normalized" form:

      ```js
      import 'https://nlz.io/<remote>/<user>/<repo>/<version>/<file>'
      import 'https://nlz.io/github/jonathanong/autocomplete/0.1.5/index.js'
      ```

      Remotes use their shorthand names such as `github` instead of `github.com` for brevity.
      `nlz build(1)` will internally normalize unnormalized URLs.

      ```js
      import 'https://github.com/jonathanong/autocomplete/0.1.5/index.js'
      import 'https://cdn.rawgit.com/jonathanong/autocomplete/0.1.5/index.js'
      import 'https://raw.githubusercontent.com/jonathanong/autocomplete/0.1.5/index.js'
      import 'https://nlz.io/github.com/jonathanong/autocomplete/0.1.5/index.js'

      // will all be normalized to:
      import 'https://nlz.io/github/jonathanong/autocomplete/0.1.5/index.js'
      ```

  section: .container
    h2(id='normalized-entry-points') Normalized Entry Points
    :markdown
      Every repository tends to have different entry points.
      For example, `necolas/normalize.css` has `normalize.css` as its entry point.
      Normalize creates `index.:format` files so you don't have to know every package's entry point.

      ```js
      import 'https://nlz.io/github/component/emitter/1/index.js'
      ```

      ```css
      @import "https://nlz.io/github/necolas/normalize.css/3/normalize.css";
      @import "https://nlz.io/github/necolas/normalize.css/3/index.css";
      ```

      Normalized entry points:

      - ☑ `index.js` - JS modules
      - ☑ `index.css` - CSS modules
      - ☐ `index.html` - Web Components.
        Simply omitting `index.html` and leaving a trailing `/` in the URL will work as well.
      - ☐ `umd.js` - standalone build
      - ☐ `node.js` - node.js JavaScript
      - ☐ `test.js` - standalone test script for JS modules. If it exists, so will `test.html`.
      - ☐ `test.html` - standalone test page. Suitable for any type of web project.
      - ☐ `README`
      - ☐ `LICENSE`

      Entry points are derived from the following `.json` files:

      - ☑ `component.json`
      - ☑ `package.json`
      - ☐ `bower.json`

  section: .container
    h2(id='normalized-metadata') Normalized Metadata
    :markdown
      Metadata will be normalized from all respective JSON files, falling back to the remote's API, if available.

      - ☐ `component.json`
      - ☐ `package.json`
      - ☐ `bower.json`
      - ☐ GitHub API
      - ☐ npm

  section: .container
    h2(id='multiple-remotes') Multiple Remotes
    :markdown
      Our goal is to eventually support all sources, private or public!

      - ☑ GitHub
      - ☑ npm
      - ☐ BitBucket
      - ☐ Bower
      - ☐ GitLab
      - ☐ GitHub Enterprise

      Want Normalize to support a specific remote? Let us know!

  section: .container
    h2(id='transformations') URL-based Transformations
    :markdown
      Instead of fiddling with complicated build steps and plugin systems,
      Normalize uses URLs to specify transformations in an HTTP-compliant manner.
      For example, suppose you have `template.jade` that you want to use in multiple ways.

      ```js
      // use the template as a function
      module render from 'template.jade.js'

      var html = render({
        name: 'jong'
      })

      // use the template as an HTML string
      module html from 'template.jade.html.js'

      document.body.insertAdjacentHTML('beforeend', html)

      // use the template as a DOM element via domify
      // https://github.com/component/domify
      module el from 'template.jade.html.domify.js'

      document.body.appendChild(el.cloneNode(true))
      ```

      No plugins or configuration required!
      And all transformations are explicitly shown and used instead of being hidden behind a complex build system.
      For more details on transformations, read the [docs on transforms](docs.html#transforms).

      > Note: if you use transformations on local files,
      > you will always need some sort of build system.
      > Push these transformations to separate modules.

  section: .container
    h2(id='custom-proxies') Easily Create Custom Proxies
    :markdown
      Creating your own (private) proxies with custom (private) remotes is easy thanks to Docker!

      ```bash
      git clone git://github.com/normalize/proxy.js
      cd proxy.js
      vim Dockerfile # Edit options
      docker build -t jong/normalize-proxy .
      docker run -p 8888:8888 -d jong/normalize-proxy
      ```

      So should setting custom remotes with `nlz(1)` via `.nlzrc`:

      ```json
      {
        "proxy": "localhost:8888",
        "self-signed": true,
        "auth": "user:pass"
      }
      ```

  section: .container
    h2(id='cdn') Use https://nlz.io as a CDN
    :markdown
      https://nlz.io is essentially a CDN, but no CDN supports SPDY Push yet!
      Unlike other CDNs such as http://cdnjs.com, http://wzrd.in, http://jspm.io, http://www.jsdelivr.com, normalization proxies:

      - SPDY push dependencies
      - Support CSS, Web Components, and well as any arbitrary file
      - Allow serving individual files, not just packages and modules
      - Do not [require pull requests](https://github.com/cdnjs/cdnjs/pulls) to add and update libraries
      - Do not require any [client-side runtime JS](https://github.com/ModuleLoader/es6-module-loader)

      If https://nlz.io is ever down or begins tracking your clients,
      just create your own proxy and point your URLs to it!

      > Note: https://nlz.io is __not__ ready for production usage.

  section: .container
    h2(id='nlz-build') nlz-build(1)
    :markdown
      The spiritual successor to [component(1)](https://github.com/component/component).
      Think [browserify(1)](https://github.com/substack/node-browserify) with:

      - Dependencies are automatically installed
      - Arbitrary remotes so you do not have to rely on any single registry
      - Native ES6 module support
      - Native CSS, Web Component, and file support

      All without requiring any transformations or plugins.

      ```bash
      nlz build index.js index.css --out build/ --watch
      ```

  section: .container
    h2(id='flat-dependency-tree') Flat Dependency Tree
    :markdown
      Unlike npm which stores modules in a nested tree
      or Bower which doesn't allow multiple versions of the same module,
      `nlz` installs modules in the normalized `<remote>/<user>/<project>/<version>/<file>` format,
      mimicking the proxy's URL structure.

      - No de-duping is ever necessary
      - No duplicate installations
      - Support multiple versions of the same dependency
      - No issues with long Windows paths
      - Easier to find modules locally

  section: .container
    h2(id='no-local-caching-layer') No Local Caching Layer
    :markdown
      All remote dependencies are stored in a directory you may specify via `.nlzrc`:

      ```json
      {
        "directory": "/User/jong/.repositories"
      }
      ```

      Unlike npm, there's no additional caching layer.
      If you'd like, you can have all your local apps and modules share the same directory.

      - No global `cache clean` issues
      - Easier sym`link`ing
      - Faster installations

  section: .container
    h2(id='ecosystem') The Normalized Ecosystem
    :markdown
      With Normalize.IO also comes an ecosystem of small, reusable web components.
      Repositories within these GitHub organizations are all maintained by the same team and are completely compatible:

      - [component](https://github.com/component) - tiny web components
      - [detects](https://github.com/detects) - feature detection as tiny ES6 modules
      - [polyfills](https://github.com/polyfills) - polyfills as tiny ES6 modules

      You may also be interested in these other organizations:

      - [components](https://github.com/components) - shim organization for popular packages
      - [suitcss](https://github.com/suitcss) - CSS UI components
